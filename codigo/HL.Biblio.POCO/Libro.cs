//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace HL.Biblio.POCO {
    public partial class Libro {
        #region Primitive Properties

        public virtual int Id {
            get;
            set;
        }

        public virtual string Codigo {
            get;
            set;
        }

        public virtual string ISBN {
            get;
            set;
        }

        public virtual string Titulo {
            get;
            set;
        }

        public virtual string Resumen {
            get;
            set;
        }

        public virtual string Edicion {
            get;
            set;
        }

        public virtual Nullable<System.DateTime> FechaPublicacion {
            get;
            set;
        }

        public virtual string Idioma {
            get;
            set;
        }

        public virtual string Observacion {
            get;
            set;
        }

        public virtual byte[] Imagen {
            get;
            set;
        }

        public virtual int Tipo {
            get;
            set;
        }

        public virtual int Estado {
            get;
            set;
        }

        #endregion
        #region Navigation Properties

        public virtual Autor Autor {
            get { return _autor; }
            set {
                if(!ReferenceEquals(_autor, value)) {
                    var previousValue = _autor;
                    _autor = value;
                    FixupAutor(previousValue);
                }
            }
        }
        private Autor _autor;

        public virtual Editorial Editorial {
            get { return _editorial; }
            set {
                if(!ReferenceEquals(_editorial, value)) {
                    var previousValue = _editorial;
                    _editorial = value;
                    FixupEditorial(previousValue);
                }
            }
        }
        private Editorial _editorial;

        public virtual ICollection<Ejemplar> Ejemplares {
            get {
                if(_ejemplares == null) {
                    var newCollection = new FixupCollection<Ejemplar>();
                    newCollection.CollectionChanged += FixupEjemplares;
                    _ejemplares = newCollection;
                }
                return _ejemplares;
            }
            set {
                if(!ReferenceEquals(_ejemplares, value)) {
                    var previousValue = _ejemplares as FixupCollection<Ejemplar>;
                    if(previousValue != null) {
                        previousValue.CollectionChanged -= FixupEjemplares;
                    }
                    _ejemplares = value;
                    var newValue = value as FixupCollection<Ejemplar>;
                    if(newValue != null) {
                        newValue.CollectionChanged += FixupEjemplares;
                    }
                }
            }
        }
        private ICollection<Ejemplar> _ejemplares;

        public virtual Clasificacion Clasificacion {
            get { return _clasificacion; }
            set {
                if(!ReferenceEquals(_clasificacion, value)) {
                    var previousValue = _clasificacion;
                    _clasificacion = value;
                    FixupClasificacion(previousValue);
                }
            }
        }
        private Clasificacion _clasificacion;

        #endregion
        #region Association Fixup

        private void FixupAutor(Autor previousValue) {
            if(previousValue != null && previousValue.Libros.Contains(this)) {
                previousValue.Libros.Remove(this);
            }

            if(Autor != null) {
                if(!Autor.Libros.Contains(this)) {
                    Autor.Libros.Add(this);
                }
            }
        }

        private void FixupEditorial(Editorial previousValue) {
            if(previousValue != null && previousValue.Libros.Contains(this)) {
                previousValue.Libros.Remove(this);
            }

            if(Editorial != null) {
                if(!Editorial.Libros.Contains(this)) {
                    Editorial.Libros.Add(this);
                }
            }
        }

        private void FixupClasificacion(Clasificacion previousValue) {
            if(previousValue != null && previousValue.Libros.Contains(this)) {
                previousValue.Libros.Remove(this);
            }

            if(Clasificacion != null) {
                if(!Clasificacion.Libros.Contains(this)) {
                    Clasificacion.Libros.Add(this);
                }
            }
        }

        private void FixupEjemplares(object sender, NotifyCollectionChangedEventArgs e) {
            if(e.NewItems != null) {
                foreach(Ejemplar item in e.NewItems) {
                    item.Libro = this;
                }
            }

            if(e.OldItems != null) {
                foreach(Ejemplar item in e.OldItems) {
                    if(ReferenceEquals(item.Libro, this)) {
                        item.Libro = null;
                    }
                }
            }
        }

        #endregion
    }
}

