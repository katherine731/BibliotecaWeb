//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace HL.Biblio.POCO
{
    public partial class Pais {
        #region Primitive Properties

        public virtual int Id {
            get;
            set;
        }

        public virtual string Nombre {
            get;
            set;
        }

        public virtual string Gentilicio {
            get;
            set;
        }

        public virtual int Estado {
            get;
            set;
        }

        #endregion
        #region Navigation Properties

        public virtual ICollection<Editorial> Editoriales {
            get {
                if(_editoriales == null) {
                    var newCollection = new FixupCollection<Editorial>();
                    newCollection.CollectionChanged += FixupEditoriales;
                    _editoriales = newCollection;
                }
                return _editoriales;
            }
            set {
                if(!ReferenceEquals(_editoriales, value)) {
                    var previousValue = _editoriales as FixupCollection<Editorial>;
                    if(previousValue != null) {
                        previousValue.CollectionChanged -= FixupEditoriales;
                    }
                    _editoriales = value;
                    var newValue = value as FixupCollection<Editorial>;
                    if(newValue != null) {
                        newValue.CollectionChanged += FixupEditoriales;
                    }
                }
            }
        }
        private ICollection<Editorial> _editoriales;

        public virtual ICollection<Autor> Autores {
            get {
                if(_autores == null) {
                    var newCollection = new FixupCollection<Autor>();
                    newCollection.CollectionChanged += FixupAutores;
                    _autores = newCollection;
                }
                return _autores;
            }
            set {
                if(!ReferenceEquals(_autores, value)) {
                    var previousValue = _autores as FixupCollection<Autor>;
                    if(previousValue != null) {
                        previousValue.CollectionChanged -= FixupAutores;
                    }
                    _autores = value;
                    var newValue = value as FixupCollection<Autor>;
                    if(newValue != null) {
                        newValue.CollectionChanged += FixupAutores;
                    }
                }
            }
        }
        private ICollection<Autor> _autores;

        #endregion
        #region Association Fixup

        private void FixupEditoriales(object sender, NotifyCollectionChangedEventArgs e) {
            if(e.NewItems != null) {
                foreach(Editorial item in e.NewItems) {
                    item.Pais = this;
                }
            }

            if(e.OldItems != null) {
                foreach(Editorial item in e.OldItems) {
                    if(ReferenceEquals(item.Pais, this)) {
                        item.Pais = null;
                    }
                }
            }
        }

        private void FixupAutores(object sender, NotifyCollectionChangedEventArgs e) {
            if(e.NewItems != null) {
                foreach(Autor item in e.NewItems) {
                    item.Pais = this;
                }
            }

            if(e.OldItems != null) {
                foreach(Autor item in e.OldItems) {
                    if(ReferenceEquals(item.Pais, this)) {
                        item.Pais = null;
                    }
                }
            }
        }

        #endregion
    }
}
